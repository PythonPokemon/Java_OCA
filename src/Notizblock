#   Klassen
-   die man geschrieben hat, befinden sich im sogenannten Default Package (standard packet)
    wenn man keinen packet verwendet befindet sich der Java Quellcode und der Bytecode, alle in einem großen Verzeichnis
-   Bei klassen muss man immer beschreiben aus welchem packet sie kommen.

#   Methoden
-   gehören zu Klassen und Klassen zu Packeten bsp. imports
-   Wenn man eine Methode schreibt muss man immer vorschreiben zu welche typen diese Methode gehört.
-   In der Praxis wird häufig eine große komplexe Methode Öffentlich gesetzt damit diese sichtbar und zugreifbar ist,
    allerdings wird diese wiederrum in viele kleine Methoden runtergebrochen und diese werden uaf Private gestellt.
-   Wenn man eigene Methoden schreibt gehen diese den statischen import methoden vor, die imports werden dann ausgegraut, um konflikte zu vermeiden.

#   Konstruktor | super(...) oder this(...) | aber nicht beides!
-   Ein Konstruktor ist eine spezielle Methode einer Klasse, die aufgerufen wird, wenn eine Instanz (ein Objekt) dieser Klasse erstellt wird.
    Konstruktoren haben den gleichen Namen wie die Klasse und keinen Rückgabewert (nicht einmal void).
-   Die Methode super() wird in Java-Konstruktoren verwendet, um den Konstruktor der Elternklasse aufzurufen.
    Normalerweise wird dies implizit durch den Compiler eingefügt, wenn kein expliziter Aufruf vorhanden ist.
    Wenn Sie jedoch einen Konstruktor in einer Unterklasse schreiben und diesen nicht explizit aufrufen,
    wird automatisch der Standardkonstruktor der Elternklasse aufgerufen.

-   Es ist wichtig zu beachten, dass der Aufruf von super() als erste Anweisung im Konstruktor der Unterklasse erfolgen muss.
    Andernfalls tritt ein Compilerfehler auf.
    Dies liegt daran, dass der Konstruktor der Elternklasse zuerst ausgeführt werden muss,
    um die Zustände der Elternklasse ordnungsgemäß zu initialisieren, bevor die Unterklasse initialisiert wird.

#   Literale
-   Ein Literal ist ein fester Wert, der direkt im Code geschrieben wird.
    In Java sind String-Literale Textwerte, die in doppelte Anführungszeichen gesetzt werden.
-   Zum Beispiel:
    Hier ist "Hello, World!" ein String-Literal.
    String-Literale werden zur Kompilierzeit erkannt und im String-Pool gespeichert.

#   Ausdrücke
-   Ein Ausdruck kann eine Kombination aus Variablen, Literalen, Operatoren und Methodenaufrufen sein, die zur Laufzeit ausgewertet werden.
    In Java kann ein Ausdruck zur Verkettung von Strings verwendet werden.
-   Zum Beispiel:
    String str1 = "Hello, ";
    String str2 = "World!";
    String result = str1 + str2;
    Hier sind str1 und str2 Variablen, die auf String-Literale verweisen, und str1 + str2 ist ein Ausdruck,
    der zur Laufzeit ausgewertet wird. Die Verkettung der Strings str1 und str2 geschieht zur Laufzeit.

    String str1 = "Hello, ";
    String str2 = "World!";
    String result = str1 + str2;
    Hier sind str1 und str2 Variablen, die auf String-Literale verweisen, und str1 + str2 ist ein Ausdruck,
    der zur Laufzeit ausgewertet wird. Die Verkettung der Strings str1 und str2 geschieht zur Laufzeit.

-   Hauptpunkte:
    Name: Der Konstruktor hat den gleichen Namen wie die Klasse.
    Kein Rückgabewert: Konstruktoren haben keinen Rückgabewert.
    Initialisierung: Konstruktoren werden verwendet, um die Felder (Attribute) der Klasse zu initialisieren.
------------------------------------------------------------------------------------------------------------------------
    Beispiel für einen Konstruktor

    public class Dog {
        private String breed;

        // Konstruktor
        public Dog(String breed) {
            super(name); // Aufruf des Konstruktors der Basisklasse Animal  //<-- super
            this.breed = breed;
        }
    }
------------------------------------------------------------------------------------------------------------------------
-   super Schlüsselwort in Java
    Das Schlüsselwort super wird verwendet, um den Konstruktor der direkten Basisklasse aufzurufen.
    Es ermöglicht den Zugriff auf Methoden und Felder der direkten Oberklasse,
    die von der aktuellen Klasse verdeckt werden könnten.

    Hauptpunkte:
    Konstruktoraufruf: super wird verwendet, um den Konstruktor der Basisklasse aufzurufen.
    Methoden/Felder: super kann auch verwendet werden, um auf Methoden und Felder der Basisklasse zuzugreifen,
    die von der Unterklasse überschrieben oder verdeckt werden.

#   "Instanzvariable" <--- Fazit ---> "Attribut" | Bezeichner
-   In Java bezieht sich der Begriff "Instanzvariable" oder "Attribut" tatsächlich auf die Variablen,
    die innerhalb einer Klasse deklariert sind und den Zustand der Objekte dieser Klasse beschreiben.
-   Diese Variablen werden auch als Instanzvariablen bezeichnet,
    weil sie jedem einzelnen Objekt (oder jeder Instanz) einer Klasse zugeordnet sind.
-   Ein Bezeichner, der frei wählbar ist, diese Instanzvariable beschreibt den Zustand eines einzelnen Message-Objekts.
-   Wenn also von einer "Instanzvariable" oder einem "Attribut" gesprochen wird,
    bezieht sich dies auf solche Variablen in einer Klasse, die den Zustand der Objekte dieser Klasse beschreiben.

#   Eigenschaften (Properties):
-   Statische Eigenschaften sind kursiv gesetzt. bsp. Math.random();
-   In Java bezieht sich der Begriff "Eigenschaften" häufig auf die Charakteristika oder Merkmale eines Objekts.
    Diese Eigenschaften beschreiben den Zustand oder die Attribute eines Objekts.
-   Die Eigenschaften eines Objekts werden normalerweise durch die Instanzvariablen oder Felder der Klasse repräsentiert.
    Zum Beispiel kann eine Person eine Eigenschaft wie "Name" haben, die durch eine Instanzvariable name repräsentiert wird.
-   Eigenschaften können auch durch Getter- und Setter-Methoden manipuliert werden, die den Zugriff auf die Instanzvariablen kontrollieren.

#   Attribute:
-   Der Begriff "Attribute" wird oft synonym mit "Eigenschaften" verwendet und bezieht sich auf die Merkmale eines Objekts, die seinen Zustand definieren.
-   In einigen Kontexten kann "Attribute" jedoch spezifischer sein und sich auf die Datenstrukturen oder Metadaten eines Objekts beziehen.
    Zum Beispiel können "Dateiattribute" Metadaten wie Dateiname, Größe und Erstellungsdatum einer Datei darstellen.
-   In anderen Kontexten kann "Attribute" auch in Bezug auf die Merkmale von Klassen oder Datenelementen in Datenbanken verwendet werden.

#   "Eigenschaften" <--- Fazit ---> "Attribute"
-   Insgesamt können die Begriffe "Eigenschaften" und "Attribute" oft austauschbar verwendet werden,
    insbesondere wenn sie sich auf die Charakteristika eines Objekts beziehen.
-   Sie helfen dabei, den Zustand von Objekten zu beschreiben und spielen eine wichtige Rolle in der objektorientierten Programmierung.

#   String
-   Verwende String, wenn du einen unveränderlichen Text benötigst.
-   Unveränderlich (immutable): Ein String-Objekt in Java ist unveränderlich. Das bedeutet, dass einmal erstellt,
    sein Wert nicht mehr geändert werden kann. Jede Modifikation eines String-Objekts führt zur Erstellung eines neuen String-Objekts.
-   Leistung: Da String unveränderlich ist, kann die wiederholte Konkatenation von String-Objekten ineffizient sein,
    da jedes Mal ein neues String-Objekt erstellt werden muss.
-   Verwendung: String wird oft für Textverarbeitungen verwendet, bei denen keine häufigen Änderungen am Text vorgenommen werden.
-   String str1 = "Hello";
    String str2 = str1 + " World"; // Ein neues String-Objekt wird erstellt

#   StringBuilder
-   Verwende StringBuilder, wenn du einen veränderlichen Text hast, der oft geändert werden muss.
-   Veränderlich (mutable): Ein StringBuilder-Objekt in Java ist veränderlich.
    Das bedeutet, dass sein Wert nach der Erstellung geändert werden kann, ohne dass neue Objekte erstellt werden.
-   Leistung: StringBuilder ist effizienter für die wiederholte Modifikation von Strings,
    da keine neuen Objekte erstellt werden müssen. Es verwendet ein internes Array, um Zeichen zu speichern,
    und dieses Array kann bei Bedarf erweitert werden.
-   Verwendung: StringBuilder wird häufig verwendet, wenn viele Änderungen an einem String vorgenommen werden sollen,
    wie z.B. in Schleifen oder bei der Verkettung vieler Strings.
-   StringBuilder sb = new StringBuilder("Hello");
    sb.append(" World"); // Der ursprüngliche StringBuilder wird geändert

#   einfachen Anführungszeichen (' ') <--- UNTERSCHIED ---> doppelten Anführungszeichen (" ")
-   Einfache Anführungszeichen (' ') werden verwendet, um Zeichen (Char) zu definieren.
    Zum Beispiel, '7' ist das Zeichen 7, dessen ASCII-Wert 55 ist.
------------------------------------------------------------------------------------------------------------------------
-   Doppelte Anführungszeichen (" ") werden verwendet, um Zeichenketten (String) zu definieren.
    Durch die Verwendung von einfachen Anführungszeichen geben Sie also einen einzelnen Charakter an,
    der in seinem ASCII-Wert verwendet wird, was zu den unterschiedlichen Ergebnissen im switch-Statement führt.

#   Der Bytecode
-   ist zu 100% Identisch, ob man den selbst schreibt oder per import einbindet,
    das sind lediglich abkürzungen für die Entwickler!

#   Sichtbarkeit
-   Public, ist für alle sichtbar.
-   Private, nicht sichtbar
-   Protected, ist Geschützt
-   Packet Public = bedeutet bsp.weise das alles innerhalb des packets öffentlich sind,
    aber für Typen außerhalb des Packets unsichtbar.

#   Arrays
-   Wenn man Arrays aufgebaut hat, bleiben sie fest, man kann sie nachträglich nicht mehr ändern.
-   Die Array-Initialisierung ist eine angenehme, kompakte schreibweise, das wir variablen deklarieren und gleichzeitig
    mit einem wert initialisieren können.
    Hinter dieser Array-Initialisierung stecken zwei Operationen.
    Zunächst wird ein Array angelegt mit der richtigen größe und anschließend werden die entsprechenden Zellen, mit entsprechenden Werten belegt

#   Lambda
-   #Ausführlicher Lambda-Ausdruck: (Employee e) -> { return e.getSalary() >= 10000; }
    Parameter sind explizit typisiert.
    Der Körper ist in geschweifte Klammern eingeschlossen und verwendet eine return-Anweisung.
    Nützlich für komplexere Logik oder wenn mehrere Anweisungen benötigt werden.
------------------------------------------------------------------------------------------------------------------------
#   Verkürzter Lambda-Ausdruck: e -> e.getSalary() >= 10000
    Parameter sind ohne Typdeklaration (Typinferenz).
    Der Körper ist ein einzelner Ausdruck ohne geschweifte Klammern und return-Anweisung.
    Ideal für einfache, kurze Ausdrücke.

#   Heap-Speicher:
-   Enthält alle Objekte und Klasseninstanzen.
-   Wird durch die Garbage Collection verwaltet.
-   Gemeinsamer Speicherbereich für alle Threads.
-   Langsamere Zugriffszeit im Vergleich zum Stack-Speicher.

#   Stack-Speicher:
    * Enthält primitive Variablen, Methodenaufrufe und lokale Variablen.
    * Wird automatisch verwaltet (LIFO-Prinzip).
    * Jeder Thread hat seinen eigenen Stack.
    * Schnellere Zugriffszeit im Vergleich zum Heap-Speicher.

#   Var-args
-   Darf nur ein einziges mal vorkommen und muss am ende der Parameterliste stehen.
-   Für den Compiler sind Var-args, nicht anderes als Arrays.
-   Performance consequence, wenn man sehr intensiv mit varargs arbeitet, dann führt das immer dazu,
    dass temporäre Array objekte aufgebaut werden, Abgerufen und gelöscht!
    In einer endlosschleife würde das massiven druck auf den Garbage Collector ausüben.
    Deswegen versucht man möglichst auf varargs in schleifen zu verzichten, damit es nicht zu performance einbussen kommt

#   Compiler
-   Der Compiler generiert Bytecode und der Bytecode initialisiert jedes Element.
-   Deswegen hat jede Variable entsprechend UNI-Code ihre Byte größe, mit der sie initialisiert wird und zwischengespeichert wird.
    Bsp. short 4 byte oder long 8 byte pro string


#   Klassenhierarchie in Java
-   Throwable ist die Oberklasse für alle Fehler und Ausnahmen.
-   Error ist eine Unterklasse von Throwable und repräsentiert schwerwiegende Fehler.
-   Exception ist eine andere Unterklasse von Throwable und repräsentiert Fehlerbedingungen,
    die von einer Anwendung vernünftigerweise wiederhergestellt werden können.
-   RuntimeException: RuntimeException ist eine Unterklasse von Exception und wird verwendet, um Ausnahmebedingungen anzuzeigen,
    die während der normalen Ausführung des Programms auftreten und die vom Programm nicht explizit abgefangen werden müssen.
-   Error ist jedoch keine Unterklasse von RuntimeException. Daher ist diese Antwort falsch.
-   Exception: Exception ist eine direkte Unterklasse von Throwable, aber Error erbt nicht direkt von Exception, sondern direkt von Throwable.

#   Exception
-   Bedeutet, dass während der Ausführung eines Programms ein Fehler aufgetreten ist, der eine sogenannte "Exception" ausgelöst hat.
-   Eine Exception ist eine Fehlermeldung, die in Java und anderen Programmiersprachen verwendet wird,
    um auf unerwartete Ereignisse oder Zustände hinzuweisen, die die normale Ausführung eines Programms unterbrechen oder verhindern können.
-   "Runtime" bezieht sich auf die Zeit, zu der das Programm tatsächlich ausgeführt wird,
    im Gegensatz zu "Compile-Time", wenn der Code kompiliert wird. Eine Exception, die zur Laufzeit ausgelöst wird,
    bedeutet daher, dass der Fehler während der Ausführung des Programms auftritt, nachdem der Code bereits kompiliert wurde
    und während der tatsächlichen Ausführung im Computer abläuft.
-   Wenn eine Exception zur Laufzeit auftritt, wird das normale Programmfluss unterbrochen, und das Programm versucht normalerweise,
    die Exception zu behandeln oder sie an den Aufrufer zurückzugeben, um sie dort zu behandeln.
    Wenn die Exception nicht behandelt wird, führt sie in der Regel zum Absturz des Programms und möglicherweise zur Anzeige einer Fehlermeldung.

#   if, else if und else <--- Fazit --->  (try-catch)-"Exception"
-   Der Unterschied zwischen if, else if, else und exception ist, das exception ausschließlich zum abfangen von fehlern verwendet wird,
    wenn man nicht genug if else block verzweigungen implementiert hat die alle variablen abfangen.
-   Die if, else if und else Blöcke werden verwendet, um verschiedene Bedingungen abzudecken und entsprechend verschiedene Anweisungen auszuführen,
    basierend auf dem Ergebnis der Bedingungen. Sie sind Teil der Kontrollstruktur, die es ermöglicht, den Programmfluss zu steuern.
-   Die Ausnahmebehandlung (try-catch), wie du sie als "Exception" bezeichnet hast, dient hingegen dazu,
    Laufzeitfehler oder Ausnahmen abzufangen und damit umzugehen, die während der Ausführung des Programms auftreten können.
    Sie wird verwendet, um das Programm vor dem Absturz zu schützen, indem sie die Ausnahme abfängt,
    die auftritt, wenn ein bestimmtes Ereignis oder eine bestimmte Bedingung nicht erfüllt ist.
-   In manchen Fällen kann eine Ausnahmebehandlung eine alternative Lösung sein, wenn es schwierig ist,
    alle möglichen Fälle mit if-else Blöcken abzudecken oder wenn der Code eine spezifische Ausnahme behandeln muss,
    die außerhalb des normalen Programmflusses liegt.

#   Parse
-   In Java bedeutet "parse" typischerweise das Konvertieren einer Zeichenfolge (String) in eine andere Datentyp repräsentation,
    wie beispielsweise einen Integer, ein Datum oder eine Gleitkommazahl. Das Parsen erfolgt gemäß den Regeln und Syntax anforderungen des Ziel-Datentyps.
    Hier sind einige wichtige Punkte zum Parsen in Java:
-   Syntax anforderungen:
    Das Parsen erfordert, dass die Eingabezeichenfolge den Syntax anforderungen des Ziel-Datentyps entspricht.
    Andernfalls kann eine Ausnahme (Exception) ausgelöst werden.
    Exception Handling:
-   Da das Parsen fehlschlagen kann, ist es wichtig, eine geeignete Fehlerbehandlung zu implementieren.
    Dies kann das Abfangen von Ausnahmen wie NumberFormatException bei der Konvertierung von Zeichenfolgen in Zahlen oder
    DateTimeParseException bei der Konvertierung von Zeichenfolgen in Datum und Uhrzeit beinhalten.
-   Standardbibliothek:
    Java bietet verschiedene Methoden und Klassen für das Parsen von Zeichenfolgen in verschiedene Datentypen.
    Zum Beispiel bietet die Integer-Klasse die Methode parseInt() für das Parsen von Zeichenfolgen in Ganzzahlen,
    die Double-Klasse bietet parseDouble() für das Parsen von Zeichenfolgen in Gleitkommazahlen und die
    LocalDate-Klasse bietet parse() für das Parsen von Zeichenfolgen in Datumswerte.
-   Anwendungen:
    Das Parsen wird in vielen Anwendungsfällen verwendet, wie z.B. der Verarbeitung von Benutzereingaben in Formularen,
    der Verarbeitung von Dateien mit strukturierten Daten, der Verarbeitung von Datenbankabfragen
    und der Verarbeitung von APIs, die JSON- oder XML-Daten liefern.

#   Swift-Code
-   In einem Swift-Code sind die Zeichen an bestimmten Positionen für verschiedene Informationen reserviert.
    Um den Ländercode zu extrahieren, müssen wir die Positionen der Zeichen kennen, die den Ländercode repräsentieren.

-   Basierend auf der Beschreibung des Swift-Codes:

    Die ersten beiden Zeichen repräsentieren den Bankcode.
    Die nächsten zwei Zeichen repräsentieren den Ländercode.
    Die nächsten zwei Zeichen repräsentieren den Ortscode.
    Die nächsten drei Zeichen repräsentieren den Zweigstellenkode.
-   Um den Ländercode zu extrahieren, müssen wir also die Zeichen von der dritten bis zur vierten Position des Swift-Codes extrahieren.
    Da Zeichenindizes in Java bei 0 beginnen, entspricht die Position des ersten Zeichens der Position 0.
    Daher ist die richtige Antwort swiftCode.substring(4, 6);.
    Diese Methode extrahiert ein Teilzeichenfolge, beginnend mit dem Zeichen an der Position 4 (einschließlich)
    und endend mit dem Zeichen an der Position 6 (ausschließlich), was die Positionen für den Ländercode abdeckt.

#   java.util.function.Predicate
-   ist ein funktionales Interface in Java, das eine Operation darstellt, die einen Wert akzeptiert
    und eine boolesche Aussage zurückgibt.
    Es hat eine einzige abstrakte Methode namens test(Object o), die den Wert überprüft und true oder false zurückgibt,
    je nachdem, ob die Bedingung erfüllt ist oder nicht.

-   Das Predicate-Interface wird häufig verwendet, um Filterbedingungen zu definieren oder
    Elemente einer Sammlung zu überprüfen. Es kann in vielen verschiedenen Kontexten verwendet werden,
    z. B. beim Filtern von Listen, beim Validieren von Eingaben oder beim Implementieren von Bedingungen in Streams.

#   p -> eine verkürzte Syntax für eine Lambda-Ausdrucksdefinition
    Ein Lambda-Ausdruck ist eine anonyme Funktion,
    die als Argument übergeben oder in einer Variablen gespeichert werden kann.

-   Die verkürzte Syntax besteht aus den folgenden Teilen:

    p: Der Parameter, der an die Funktion übergeben wird.
    ->: Der Pfeil-Operator, der den Parameter vom Körper des Lambda-Ausdrucks trennt.
    Der Körper des Lambda-Ausdrucks, der die Operation oder Berechnung darstellt.

#   @Override
-   Das @Override-Annotation ist optional, aber es bietet eine Sicherheitshinweis für den Fall,
    dass eine Methode nicht wie beabsichtigt überschrieben wird.
    Wenn Sie @Override verwenden und es tritt ein Fehler auf, wenn die Methode nicht richtig überschrieben wird,
    können Sie diesen Fehler während der Kompilierung erkennen, anstatt ihn erst zur Laufzeit zu entdecken.
-   Das @Override-Annotation wird verwendet, um sicherzustellen,
    dass eine Methode tatsächlich eine Methode in der Superklasse überschreibt.
    Wenn Sie versuchen, eine Methode zu überschreiben, aber einen Tippfehler im Methodennamen haben
    oder die Parameterliste nicht übereinstimmt, wird der Compiler einen Fehler melden,
    wenn Sie das @Override-Annotation verwenden.

#   Die Methode super()
-   wird in Java-Konstruktoren verwendet, um den Konstruktor der Elternklasse aufzurufen.
    Normalerweise wird dies implizit durch den Compiler eingefügt, wenn kein expliziter Aufruf vorhanden ist.
    Wenn Sie jedoch einen Konstruktor in einer Unterklasse schreiben und diesen nicht explizit aufrufen,
    wird automatisch der Standardkonstruktor der Elternklasse aufgerufen.

    Es ist wichtig zu beachten, dass der Aufruf von super() als erste Anweisung im Konstruktor der Unterklasse erfolgen muss.
    Andernfalls tritt ein Compilerfehler auf.
    Dies liegt daran, dass der Konstruktor der Elternklasse zuerst ausgeführt werden muss,
    um die Zustände der Elternklasse ordnungsgemäß zu initialisieren, bevor die Unterklasse initialisiert wird.