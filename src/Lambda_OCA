In Java ist p -> eine verkürzte Syntax für eine Lambda-Ausdrucksdefinition.
Ein Lambda-Ausdruck ist eine anonyme Funktion, die als Argument übergeben oder in einer Variablen gespeichert werden kann.
Die verkürzte Syntax besteht aus den folgenden Teilen:

p: Der Parameter, der an die Funktion übergeben wird.
->: Der Pfeil-Operator, der den Parameter vom Körper des Lambda-Ausdrucks trennt.
Der Körper des Lambda-Ausdrucks, der die Operation oder Berechnung darstellt.

Im Kontext des gegebenen Codes ist Predicate<String> ein funktionales Interface,
das eine Methode test(String str) definiert, die true oder false zurückgibt, je nachdem,
ob die Bedingung erfüllt ist oder nicht.
Um einen Lambda-Ausdruck zu erstellen, der mit diesem Predicate-Interface kompatibel ist,
müssen Sie einen Parameter (in diesem Fall p) angeben, der an die test-Methode übergeben wird,
und dann die Bedingung im Körper des Lambda-Ausdrucks angeben.

Die Antworten p -> true, p -> p.length() < 10, p -> p.length() >= 1 und p -> !false sind alle gültige Lambda-Ausdrücke,
die mit dem Predicate<String> kompatibel sind und daher als Argumente für die processStringArray-Methode verwendet werden können.
Jeder Lambda-Ausdruck definiert eine Bedingung, die für jedes Element des String-Arrays getestet wird.
------------------------------------------------------------------------------------------------------------------------
normale Syntax für einen Lambda-Ausdruck:

(parameter) -> {
    // Body of the lambda expression
    // This could be a single statement or multiple statements
}
------------------------------------------------------------------------------------------------------------------------
verkürzte Syntax für denselben Lambda-Ausdruck:

parameter -> // Single statement or expression
------------------------------------------------------------------------------------------------------------------------
Beachten Sie, dass die verkürzte Syntax verwendet werden kann,
wenn der Lambda-Ausdruck nur aus einer einzigen Anweisung oder einem einzigen Ausdruck besteht.
Wenn mehrere Anweisungen im Lambda-Körper enthalten sind, muss die vollständige Syntax verwendet werden.
------------------------------------------------------------------------------------------------------------------------
Die Lambda-Methode in Java ermöglicht es, Funktionen als Methodenargumente zu übergeben
oder als anonyme Funktionen zu erstellen. Dies erleichtert das Schreiben von Code,
insbesondere in Funktionsschnittstellen wie Runnable, Comparator, Predicate usw.

Die Verwendung von Lambda-Ausdrücken macht den Code oft kürzer und lesbarer,
insbesondere bei Funktionsschnittstellen mit nur einer abstrakten Methode (sogenannten Funktions- oder SAM-Schnittstellen).
Sie ermöglichen auch eine elegantere Syntax für das Erstellen von Objekten, die diese Schnittstellen implementieren.

Ein Lambda-Ausdruck besteht aus Parametern, einem Pfeil (->) und einem Ausdruck oder einer Anweisung.
Es kann eine verkürzte Syntax verwendet werden, wenn der Lambda-Körper nur aus einer einzelnen Anweisung besteht.

Insgesamt bietet die Verwendung von Lambda-Ausdrücken eine flexiblere und weniger boilerplate-Code-Alternative
zum Schreiben anonymer Klassen für Funktionsschnittstellen.