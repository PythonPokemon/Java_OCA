ClassCastException
– Wird ausgelöst, wenn ein ungültiger Typumwandlungsversuch (Cast) durchgeführt wird.
------------------------------------------------------------------------------------------------------------------------
Regeln und Best Practices
------------------------------------------------------------------------------------------------------------------------
1.Überprüfen des Typs vor dem Cast:

Überprüfen Sie den Typ eines Objekts, bevor Sie eine Typumwandlung durchführen, um sicherzustellen,
dass der Cast gültig ist.
Verwenden Sie instanceof, um den Typ zu überprüfen:

if (obj instanceof Integer) {
    Integer zahl = (Integer) obj;
} else {
    System.out.println("Fehler: Das Objekt ist kein Integer.");
}
------------------------------------------------------------------------------------------------------------------------
2.Verwendung von Generics:

Verwenden Sie Generics, um Typumwandlungsprobleme zu vermeiden. Generics bieten eine typsichere Möglichkeit,
mit verschiedenen Typen zu arbeiten und ClassCastException zu verhindern:

List<String> liste = new ArrayList<>();
liste.add("Hallo");
String text = liste.get(0);  // Kein Cast erforderlich
------------------------------------------------------------------------------------------------------------------------
3.Verwendung von try-catch-Block:

Verwenden Sie try-catch-Blöcke, um potenzielle ClassCastException abzufangen und zu behandeln.
Dies verhindert, dass Ihr Programm aufgrund einer ungültigen Typumwandlung abstürzt:

try {
    Integer zahl = (Integer) obj;
} catch (ClassCastException e) {
    System.out.println("Fehler: Ungültiger Typumwandlungsversuch.");
}
------------------------------------------------------------------------------------------------------------------------
Fazit
Die ClassCastException ist eine häufige Ausnahme in Java, die auftritt,
wenn eine ungültige Typumwandlung durchgeführt wird.
Durch ordnungsgemäße Überprüfung des Typs vor dem Cast,
die Verwendung von Generics und das Abfangen der Ausnahme mit try-catch-Blöcken können Sie sicherstellen,
dass Ihr Programm robust und fehlerresistent bleibt.
------------------------------------------------------------------------------------------------------------------------