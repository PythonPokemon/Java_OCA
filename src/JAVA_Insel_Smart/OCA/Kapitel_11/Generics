Was sind Generics?
------------------------------------------------------------------------------------------------------------------------
Warum Generics keine primitiven Typen unterstützen
Generics in Java basieren auf Typ-Erasure, was bedeutet, dass die Generics-Informationen zur Laufzeit gelöscht werden.
Die JVM sieht zur Laufzeit keine Unterschiede zwischen den verschiedenen Instanziierungen einer
generischen Klasse oder Methode.
Da primitive Typen keine Objekte sind, können sie nicht als Typparameter für Generics verwendet werden.

Zusammenfassung
Arrays: Unterstützen sowohl primitive Typen als auch Referenztypen.
Generics: Unterstützen nur Referenztypen, daher müssen Wrapper-Klassen verwendet werden.
Wrapper-Klassen: Erlauben es, primitive Typen in Generics zu verwenden, indem sie die primitiven Typen
in Objekte umwandeln.
------------------------------------------------------------------------------------------------------------------------
Generics ermöglichen es dir, Klassen, Schnittstellen und Methoden so zu definieren,
dass sie mit beliebigen Datentypen arbeiten können. Dies erhöht die Wiederverwendbarkeit und Typsicherheit des Codes.
------------------------------------------------------------------------------------------------------------------------
Regeln und Best Practices
------------------------------------------------------------------------------------------------------------------------
Typ-Parameter:

Übliche Konventionen sind T für Typ, E für Element, K für Schlüssel und V für Wert.
------------------------------------------------------------------------------------------------------------------------
Einschränkungen:

Du kannst generische Typen mit Einschränkungen versehen:

public class NumberBox<T extends Number> {
    private T content;

    public void setContent(T content) {
        this.content = content;
    }

    public T getContent() {
        return content;
    }
}
Hier muss T eine Unterklasse von Number sein.
------------------------------------------------------------------------------------------------------------------------
Rohtypen vermeiden:

Verwende immer parametrisierten Typen anstelle von Rohtypen.

Box<String> stringBox = new Box<>(); // Richtig
Box rawBox = new Box(); // Falsch, vermeidet Typsicherheit
------------------------------------------------------------------------------------------------------------------------
Generische Arrays:

Direkt generische Arrays zu erstellen ist problematisch:

List<Integer>[] arrayOfLists = new List<Integer>[10]; // Kompiliert nicht

Stattdessen benutze:

List<Integer>[] arrayOfLists = (List<Integer>[]) new List<?>[10]; // Suppressed warning
------------------------------------------------------------------------------------------------------------------------
Durch diese Beispiele und Erklärungen solltest du einen guten Überblick über die Verwendung von Generics in Java haben.
------------------------------------------------------------------------------------------------------------------------