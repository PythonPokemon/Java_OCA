--------------------------------------String Deklaration und Initialisierung--------------------------------------------
1. Literale
Erklärung:
Ein String-Literal ist eine Folge von Zeichen, die in doppelten Anführungszeichen eingeschlossen ist.
Literale werden im String-Pool gespeichert.

Beispiel:
String str1 = "Hello";
String str2 = "World";
------------------------------------------------------------------------------------------------------------------------
Konstruktoren
Erklärung:
Man kann einen String auch mit dem new-Schlüsselwort und einem Konstruktor erstellen.
Dies erzeugt ein neues String-Objekt im Heap-Speicher, auch wenn der gleiche Wert bereits im String-Pool existiert.

Beispiel:
String str3 = new String("Hello");
------------------------------------------------------------------------------------------------------------------------
2. String Pool
Erklärung:
Der String-Pool ist ein spezieller Speicherbereich, in dem die JVM String-Literale speichert.
Wenn ein neues String-Literal erstellt wird, überprüft die JVM zuerst den String-Pool,
um zu sehen, ob ein identischer String bereits existiert.
Wenn ja, wird eine Referenz auf das vorhandene String-Objekt zurückgegeben.

String str4 = "Hello";
String str5 = "Hello";
System.out.println(str4 == str5); // true, da beide auf dasselbe Objekt im String-Pool verweisen
------------------------------------------------------------------------------------------------------------------------
3. Immutabilität
Erklärung:
Strings in Java sind unveränderlich (immutable).
Das bedeutet, dass einmal erstellte String-Objekte nicht geändert werden können.
Wenn eine String-Änderung vorgenommen wird, wird ein neues String-Objekt erstellt.

Beispiel:
String str6 = "Hello";
str6 = str6.concat(" World");
System.out.println(str6); // "Hello World", ein neues String-Objekt wurde erstellt
------------------------------------------------------------------------------------------------------------------------
4. Wichtige Methoden der String-Klasse
length()
Erklärung:
Gibt die Länge des Strings zurück.

Beispiel:
String str7 = "Hello";
int length = str7.length(); // 5
------------------------------------------------------------------------------------------------------------------------
charAt(int index)
Erklärung:
Gibt das Zeichen an der angegebenen Position zurück.

Beispiel:
char ch = str7.charAt(1); // 'e'
------------------------------------------------------------------------------------------------------------------------
substring(int beginIndex, int endIndex)
Erklärung:
Gibt einen neuen String zurück, der eine Teilzeichenfolge des Original-Strings ist.

Beispiel:
String subStr = str7.substring(1, 4); // "ell"
------------------------------------------------------------------------------------------------------------------------
equals(Object anObject)
Erklärung:
Vergleicht den String mit einem anderen Objekt auf Gleichheit.

Beispiel:
String str8 = "Hello";
boolean isEqual = str7.equals(str8); // true
------------------------------------------------------------------------------------------------------------------------
equalsIgnoreCase(String anotherString)
Erklärung:
Vergleicht zwei Strings unabhängig von der Groß-/Kleinschreibung.

Beispiel:
boolean isEqualIgnoreCase = str7.equalsIgnoreCase("hello"); // true
------------------------------------------------------------------------------------------------------------------------
compareTo(String anotherString)
Erklärung:
Vergleicht zwei Strings lexikographisch.

Beispiel:
int comparison = str7.compareTo(str8); // 0, weil beide Strings gleich sind
------------------------------------------------------------------------------------------------------------------------
toLowerCase() und toUpperCase()
Erklärung:
Konvertiert den String in Kleinbuchstaben bzw. Großbuchstaben.

Beispiel:
String lowerCase = str7.toLowerCase(); // "hello"
String upperCase = str7.toUpperCase(); // "HELLO"
------------------------------------------------------------------------------------------------------------------------
trim()
Erklärung:
Entfernt führende und nachfolgende Leerzeichen.

Beispiel:
String str9 = "  Hello  ";
String trimmedStr = str9.trim(); // "Hello"
------------------------------------------------------------------------------------------------------------------------
replace(char oldChar, char newChar)
Erklärung:
Ersetzt alle Vorkommen eines bestimmten Zeichens durch ein anderes Zeichen.

Beispiel:
String replacedStr = str7.replace('e', 'a'); // "Hallo"
------------------------------------------------------------------------------------------------------------------------
5. StringBuilder und StringBuffer
StringBuilder
Erklärung:
StringBuilder ist eine Klasse, die für veränderliche (mutable) Strings verwendet wird.
Sie ist nicht threadsicher, aber schneller als StringBuffer.

Beispiel:
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb.toString()); // "Hello World"
------------------------------------------------------------------------------------------------------------------------
StringBuffer
Erklärung:
StringBuffer ist ähnlich wie StringBuilder, aber threadsicher, was bedeutet, dass sie synchronisiert ist
und sicher in einem Multithreading-Kontext verwendet werden kann.

Beispiel:
StringBuffer sbf = new StringBuffer("Hello");
sbf.append(" World");
System.out.println(sbf.toString()); // "Hello World"
------------------------------------------------------------------------------------------------------------------------
Zusammenfassung
Hier sind die Schlüsselkonzepte von Strings in Java chronologisch und mit Beispielen erklärt:

Deklaration und Initialisierung:----------------------------------------------------------------------------------------

Literale: String str1 = "Hello";
Konstruktoren: String str3 = new String("Hello");
String Pool:

String str4 = "Hello";
String str5 = "Hello";
System.out.println(str4 == str5); // true

Immutabilität:----------------------------------------------------------------------------------------------------------

String str6 = "Hello";
str6 = str6.concat(" World");
System.out.println(str6); // "Hello World"

Wichtige Methoden:------------------------------------------------------------------------------------------------------

length():               int length = str7.length(); // 5
charAt():               char ch = str7.charAt(1); // 'e'
substring():            String subStr = str7.substring(1, 4); // "ell"
equals():               boolean isEqual = str7.equals("Hello"); // true
equalsIgnoreCase():     boolean isEqualIgnoreCase = str7.equalsIgnoreCase("hello"); // true
compareTo():            int comparison = str7.compareTo("Hello"); // 0
toLowerCase():          String lowerCase = str7.toLowerCase(); // "hello"
toUpperCase():          String upperCase = str7.toUpperCase(); // "HELLO"
trim():                 String trimmedStr = " Hello ".trim(); // "Hello"
replace():              String replacedStr = str7.replace('e', 'a'); // "Hallo"

StringBuilder und StringBuffer:-----------------------------------------------------------------------------------------

StringBuilder: StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb.toString()); // "Hello World"

StringBuffer: StringBuffer sbf = new StringBuffer("Hello");
sbf.append(" World");
System.out.println(sbf.toString()); // "Hello World"

Diese Konzepte sind essenziell für die Java OCA-Prüfung
und bieten ein grundlegendes Verständnis für den Umgang mit Strings in Java.
------------------------------------------------------------------------------------------------------------------------
Tatsächlich sind Strings in Java Objekte. Sie gehören zur Klasse java.lang.String, die eine finalisierte Klasse ist,
was bedeutet, dass sie nicht erweitert werden kann.
Jedes Mal, wenn du einen String in Java erstellst, erstellst du ein Objekt der String-Klasse.
Das bedeutet, dass Strings in Java mehr sind als nur eine Abfolge von Zeichen;
sie sind tatsächlich Objekte mit vielen nützlichen Methoden.
------------------------------------------------------------------------------------------------------------------------
Beispiel: String als Objekt

public class StringExample {
    public static void main(String[] args) {
        // Ein String-Literal wird in den String-Pool aufgenommen
        String str1 = "Hello";

        // Ein neues String-Objekt wird auf dem Heap erstellt
        String str2 = new String("World");

        // Verketten von String-Objekten
        String str3 = str1 + " " + str2;

        // Aufrufen von Methoden der String-Klasse
        System.out.println("Length of str1: " + str1.length());
        System.out.println("Character at index 1 in str2: " + str2.charAt(1));
        System.out.println("Upper case str3: " + str3.toUpperCase());
    }
}

Erklärung:
str1 ist ein String-Literal. Es wird in den String-Pool aufgenommen,
der ein spezieller Bereich des Heaps ist, der für Strings reserviert ist.

str2 wird mit dem new-Operator erstellt. Dadurch wird ein neues String-Objekt auf dem Heap erstellt.
str3 wird durch Verkettung von str1 und str2 erstellt. Dies führt zu einem neuen String-Objekt.
Methoden wie length(), charAt() und toUpperCase() sind Methoden der String-Klasse und zeigen, dass Strings in Java Objekte sind.
------------------------------------------------------------------------------------------------------------------------
Warum Strings Objekte sind
Strings in Java sind Objekte, weil sie Instanzen der String-Klasse sind.
Die String-Klasse bietet viele Methoden zur Manipulation und Abfrage von Zeichenfolgen.
Diese Methoden sind nur in Objekten vorhanden, was ein starkes Indiz dafür ist, dass Strings Objekte sind.

Ein weiteres wichtiges Konzept in Bezug auf Strings ist der String-Pool, der zur Optimierung der Speicherverwaltung dient.
Wenn ein String-Literal erstellt wird, überprüft die JVM, ob dieser String bereits im Pool vorhanden ist.
Wenn ja, wird die Referenz des vorhandenen Strings zurückgegeben. Andernfalls wird der neue String dem Pool hinzugefügt.
Dies spart Speicherplatz und verbessert die Leistung.

Zusammenfassung
String-Literale werden im String-Pool gespeichert.
Strings sind Objekte der Klasse java.lang.String.
Methoden wie length(), charAt(), toUpperCase() und viele andere sind nur auf String-Objekten verfügbar.
------------------------------------------------------------------------------------------------------------------------
Beispiel: Verwendung von Strings in einer Liste
Hier ist ein Beispiel, das zeigt, wie Strings in einer Liste verwendet werden:

import java.util.ArrayList;
import java.util.List;

public class StringListExample {
    public static void main(String[] args) {
        List<String> stringList = new ArrayList<>();

        // Hinzufügen von String-Objekten zur Liste
        stringList.add("Hello");
        stringList.add("World");
        stringList.add("!");

        // Iteration über die Liste und Ausgabe der Werte
        for (String str : stringList) {
            System.out.println(str);
        }

        // Entfernen eines Werts aus der Liste
        stringList.remove("World");

        // Überprüfen, ob ein Wert in der Liste vorhanden ist
        boolean containsValue = stringList.contains("Hello");
        System.out.println("List contains 'Hello': " + containsValue);

        // Ausgabe der Liste nach dem Entfernen
        System.out.println("List after removal: " + stringList);
    }
}

Erklärung des Codes
Hinzufügen von Werten: String-Objekte werden der Liste hinzugefügt.
Iteration und Ausgabe: Beim Iterieren über die Liste werden die String-Objekte ausgegeben.
Entfernen eines Werts: Das String-Objekt "World" wird aus der Liste entfernt.
Überprüfen und Ausgabe: Überprüfung, ob "Hello" in der Liste ist, und Ausgabe der Liste nach dem Entfernen.

Zusammengefasst: In Java sind Strings tatsächlich Objekte,
und dies ermöglicht die Verwendung von Methoden und die Teilnahme an Collections wie Listen.


Ja, StringBuilder ist ebenfalls ein Objekt in Java. StringBuilder gehört zur Klasse java.lang.StringBuilder und wird häufig verwendet, wenn Strings oft verändert werden müssen. Im Gegensatz zu Strings, die unveränderlich (immutable) sind, ist StringBuilder veränderlich (mutable), was bedeutet, dass sein Inhalt geändert werden kann, ohne dass neue Objekte erstellt werden müssen.

Eigenschaften von StringBuilder
Mutable: Der Inhalt eines StringBuilder-Objekts kann geändert werden.
Effizient: Wird oft verwendet, wenn viele Änderungen an einem String vorgenommen werden müssen, da es Speicher- und Leistungsprobleme vermeidet, die durch die Erstellung vieler String-Objekte entstehen könnten.
Beispiel: Verwendung von StringBuilder
Hier ist ein einfaches Beispiel, das zeigt, wie StringBuilder verwendet werden kann:

java
Code kopieren
public class StringBuilderExample {
    public static void main(String[] args) {
        // Erstellung eines StringBuilder-Objekts
        StringBuilder sb = new StringBuilder("Hello");

        // Anhängen eines Strings
        sb.append(" World");

        // Einfügen eines Strings an einer bestimmten Position
        sb.insert(6, "Beautiful ");

        // Löschen eines Teils des Strings
        sb.delete(6, 16);

        // Umkehren des Strings
        sb.reverse();

        // Ausgabe des Inhalts von StringBuilder
        System.out.println(sb.toString());
    }
}
Erklärung des Codes
Erstellung: StringBuilder sb = new StringBuilder("Hello"); erstellt ein StringBuilder-Objekt mit dem Inhalt "Hello".
Anhängen: sb.append(" World"); hängt " World" an den bestehenden Inhalt an, sodass der Inhalt nun "Hello World" ist.
Einfügen: sb.insert(6, "Beautiful "); fügt "Beautiful " an der Position 6 ein, sodass der Inhalt nun "Hello Beautiful World" ist.
Löschen: sb.delete(6, 16); löscht den Teil von Index 6 bis 16, sodass der Inhalt nun wieder "Hello World" ist.
Umkehren: sb.reverse(); kehrt den Inhalt um, sodass der Inhalt nun "dlroW olleH" ist.
Ausgabe: System.out.println(sb.toString()); gibt den Inhalt von StringBuilder aus.
Unterschied zwischen String und StringBuilder
Unveränderlichkeit: String ist unveränderlich. Jede Änderung an einem String erzeugt ein neues String-Objekt. StringBuilder ist veränderlich, und Änderungen werden am gleichen Objekt vorgenommen.
Leistung: Für viele Änderungen an einem String ist St
------------------------------------------------------------------------------------------------------------------------
Bei überladenen Methoden in Java spielt die Hierarchie der Klassen und Schnittstellen eine entscheidende Rolle,
wenn der Compiler entscheidet, welche Methode aufzurufen ist.
Der Compiler wählt die am besten passende Methode basierend auf den Typen der Argumente.
Wenn mehrere überladene Methoden für ein bestimmtes Argument in Frage kommen,
bevorzugt der Compiler die spezifischere Methode gegenüber einer allgemeineren Methode.

In deinem Beispiel haben wir drei überladene Methoden m1, die jeweils verschiedene Parameter akzeptieren:
CharSequence, String und Object.

Hier ist die Klassen- und Schnittstellenhierarchie relevant,
da String eine Unterklasse von Object ist und auch die Schnittstelle CharSequence implementiert:

Object
CharSequence (Schnittstelle)
String
Wenn du die Methode m1(null) aufrufst, muss der Compiler entscheiden, welche der überladenen Methoden am besten zu null passt.
Da null ein gültiger Wert für jeden Referenztyp ist, ist null sowohl mit Object, CharSequence als auch String kompatibel.
Die spezifischste Methode wird gewählt, was in diesem Fall die Methode m1(String s) ist.

Hier ist der Ablauf, wie der Compiler die Entscheidung trifft:

Specificity: String ist spezifischer als CharSequence und Object, weil String eine Unterklasse von Object ist
und die CharSequence-Schnittstelle implementiert.
Method Selection: Der Compiler wählt die Methode, die den spezifischsten Typ akzeptiert,
der mit dem Argument null kompatibel ist. Daher wird m1(String s) gewählt.

Lass uns den Code und die Ausgabe durchgehen:

public class test44 {
    public static void main(String[] args) {
        m1(null);
    }

    static void m1(CharSequence s) {
        System.out.println("CharSequence");
    }

    static void m1(String s) {
        System.out.println("String");
    }

    static void m1(Object s) {
        System.out.println("Object");
    }
}

Ausgabe
String

Erklärung
Hierarchie der Methodenparameter:

Object ist die allgemeinste Methode.
CharSequence ist spezifischer als Object.
String ist am spezifischsten, da es eine konkrete Implementierung von CharSequence ist und direkt von Object erbt.
Methodenauflösung:

Bei m1(null) sucht der Compiler die spezifischste Methode, die mit null kompatibel ist.
Zwischen Object, CharSequence und String ist String am spezifischsten.
Daher wird m1(String s) ausgewählt und "String" wird ausgegeben.

Dieses Verhalten zeigt, wie die Hierarchie der Klassen und Schnittstellen die Methode bestimmt, die aufgerufen wird,
wenn mehrere überladene Methoden vorhanden sind.
Der Compiler bevorzugt die spezifischere Methode, wenn mehrere Optionen vorhanden sind.