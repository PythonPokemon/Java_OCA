Java eine Regel hat, die besagt, dass catch-Blöcke für spezifischere Ausnahmen vor catch-Blöcken
für allgemeinere Ausnahmen stehen müssen.

Das liegt daran, dass ein catch-Block für eine allgemeinere Ausnahme auch alle spezifischeren Ausnahmen abfängt,
die von dieser allgemeinen Ausnahme erben.

Wenn du den allgemeineren catch-Block zuerst platzierst, wird der spezifischere catch-Block niemals erreicht
und der Compiler erkennt dies als Fehler.
------------------------------------------------------------------------------------------------------------------------
Hier ist eine detaillierte Erklärung des Problems:

1.Hierarchie der Ausnahmen:
IOException ist eine Oberklasse.
FileNotFoundException ist eine Unterklasse von IOException.

try {
    // Code, der eine Ausnahme werfen kann
} catch (IOException e) {
    // Dies fängt alle IOExceptions und deren Unterklassen (wie FileNotFoundException) ab
} catch (FileNotFoundException e) {
    // Dieser Block wird nie erreicht, weil alle FileNotFoundExceptions bereits im oberen Block gefangen werden
}
------------------------------------------------------------------------------------------------------------------------
2.Problem bei der Reihenfolge:

Wenn du zuerst den catch-Block für IOException hast, wird jede Ausnahme, die IOException
oder eine ihrer Unterklassen ist, von diesem Block gefangen.
Daher wird ein catch-Block für FileNotFoundException nie erreicht, weil FileNotFoundException
bereits von dem vorhergehenden catch-Block für IOException gefangen wird.
------------------------------------------------------------------------------------------------------------------------
3.Compiler fehler:

Der Compiler erkennt, dass der catch-Block für FileNotFoundException nie erreicht wird,
weil der catch-Block für IOException alle FileNotFoundException-Fälle bereits abfängt.
Dies führt zu einem Compiler fehler, da der spezifische catch-Block für
FileNotFoundException unnötig und nicht erreichbar ist.

Korrektes Beispiel:

ileNotFoundException;
import java.io.IOException;

abstract class Super {
    public abstract void m1() throws IOException;
}

class Sub extends Super {
    @Override
    public void m1() throws IOException {
        throw new FileNotFoundException();
    }
}

public class test37 {
    public static void main(String[] args) {
        Super s = new Sub();
        try {
            s.m1();
        } catch (FileNotFoundException e) {  // spezifischere Ausnahme zuerst
            System.out.print("B");
        } catch (IOException e) {  // allgemeinere Ausnahme danach
            System.out.print("A");
        } finally {
            System.out.print("C");
        }
    }
}

Erklärung des korrekten Beispiels:

1.try-Block:
Hier wird die Methode m1() aufgerufen, die eine FileNotFoundException werfen kann.

2.catch-Block für FileNotFoundException:
Dieser Block fängt spezifisch die FileNotFoundException.
Da FileNotFoundException geworfen wird, wird dieser Block ausgeführt und "B" wird ausgegeben.

3.catch-Block für IOException:
Dieser Block fängt alle anderen IOException-Fälle, die nicht FileNotFoundException sind.
Da die FileNotFoundException bereits im vorherigen Block abgefangen wurde, wird dieser Block nicht ausgeführt.

4.finally-Block:
Dieser Block wird immer ausgeführt, unabhängig davon, ob eine Ausnahme aufgetreten ist oder nicht.
Daher wird "C" ausgegeben.
------------------------------------------------------------------------------------------------------------------------
Ergebnis:

Die Ausgabe des Programms ist "BC", weil die FileNotFoundException gefangen wird
und danach der finally-Block ausgeführt wird.
Durch die richtige Reihenfolge der catch-Blöcke stellst du sicher, dass spezifischere Ausnahmen zuerst abgefangen werden,
bevor allgemeinere Ausnahmen behandelt werden, was den Compiler fehler verhindert.