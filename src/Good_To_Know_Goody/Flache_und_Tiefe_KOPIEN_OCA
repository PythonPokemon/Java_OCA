Flache Kopie vs. Tiefe Kopie
Flache Kopie:
Eine flache Kopie einer Liste kopiert die Struktur der Liste selbst, d.h. es wird eine neue Liste erstellt, aber die enthaltenen Objekte werden nicht dupliziert. Stattdessen werden die Referenzen zu den ursprünglichen Objekten in der neuen Liste gespeichert. Dies bedeutet, dass sowohl die originale Liste als auch die geklonte Liste auf dieselben Objekte zeigen.

Tiefe Kopie:
Eine tiefe Kopie würde nicht nur die Struktur der Liste, sondern auch alle enthaltenen Objekte duplizieren. Jede Referenz in der ursprünglichen Liste würde auf ein neues, unabhängiges Objekt in der kopierten Liste verweisen.

Beispiel-Code und Erklärung
Schauen wir uns den Beispielcode erneut an und sehen, wie eine flache Kopie funktioniert:

java
Code kopieren
package JAVA_OCA_Simulation.JAVA_OCA_Test_2.Aufgaben_50_bis_59;

import java.util.ArrayList;

public class test54 {
    public static void main(String[] args) {
        ArrayList<Integer> original = new ArrayList<>();
        original.add(new Integer(10));

        ArrayList<Integer> cloned = (ArrayList<Integer>) original.clone();
        Integer i1 = cloned.get(0);
        ++i1;

        System.out.println(cloned);
    }
}
Erstellen und Initialisieren der Liste original:

java
Code kopieren
ArrayList<Integer> original = new ArrayList<>();
original.add(new Integer(10));
Hier wird eine ArrayList namens original erstellt und das Integer-Objekt 10 hinzugefügt. Die Liste original enthält jetzt ein Element: [10].

Klonen der Liste original:

java
Code kopieren
ArrayList<Integer> cloned = (ArrayList<Integer>) original.clone();
Die Liste original wird geklont, und die geklonte Liste wird cloned zugewiesen. Da es sich um eine flache Kopie handelt, zeigt cloned auf dasselbe Integer-Objekt wie original. Beide Listen enthalten dasselbe Integer-Objekt 10, also ist der Zustand von cloned ebenfalls [10].

Zugreifen auf das erste Element der geklonten Liste cloned und Inkrementieren:

java
Code kopieren
Integer i1 = cloned.get(0);
++i1;
Hier wird das erste Element von cloned (Index 0) in die Variable i1 gespeichert. Da Integer in Java unveränderlich ist, bewirkt die Inkrement-Operation ++i1, dass i1 auf ein neues Integer-Objekt mit dem Wert 11 zeigt. Dies ändert jedoch nichts an den Elementen in den Listen original und cloned, da i1 nur eine Kopie der Referenz auf das ursprüngliche Integer-Objekt ist.

Ausgabe der Liste cloned:

java
Code kopieren
System.out.println(cloned);
Da die ArrayList cloned nach wie vor dasselbe Integer-Objekt 10 enthält, lautet die Ausgabe:

csharp
Code kopieren
[10]
Fazit
Eine flache Kopie kopiert die Struktur der Liste, aber nicht die enthaltenen Objekte.
Änderungen an den kopierten Objekten (Referenzen) wirken sich nicht auf die ursprüngliche Liste aus.
Änderungen an den Objekten selbst (falls sie veränderbar sind) würden sich jedoch auf beide Listen auswirken, da sie auf dieselben Objekte verweisen.
In diesem Fall zeigt die Liste cloned weiterhin auf das unveränderte Integer-Objekt 10, weshalb die Ausgabe [10] ist.





